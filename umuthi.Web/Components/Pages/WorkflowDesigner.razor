@page "/workflow-designer/{workflowId:guid}"
@using umuthi.Web.Components
@using umuthi.Application.DTOs
@using umuthi.Application.Interfaces
@using umuthi.Domain.Enums
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.Components.Web
@inject IWorkflowService WorkflowService
@inject ILogger<WorkflowDesigner> Logger
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>Workflow Designer - @(workflow?.Name ?? "Loading...")</PageTitle>

@if (workflow == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading workflow...</p>
        </div>
    </div>
}
else
{
    <div style="height: 100vh; display: flex; flex-direction: column;" tabindex="0">
        <!-- Header -->
        <div style="padding: 1rem; background: white; border-bottom: 1px solid #dee2e6; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">@workflow.Name</h2>
                    <p class="text-muted mb-0">@workflow.Description</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary">
                        <i class="bi bi-save"></i> Save
                    </button>
                    <button class="btn btn-outline-secondary">
                        <i class="bi bi-play"></i> Test Run
                    </button>
                    <a href="/workflows" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Workflows
                    </a>
                </div>
            </div>
        </div>
        
        <!-- Canvas -->
        <div style="flex: 1;">
            <WorkflowCanvas OnAddNodeClicked="OnAddNodeClicked">
                <!-- Sample workflow nodes using the new WorkflowNode component -->
                @foreach (var node in workflowNodes)
                {
                    <WorkflowNode Id="@node.Id"
                                  Label="@node.Label"
                                  Description="@node.Description"
                                  NodeType="@node.NodeType"
                                  PositionX="@node.PositionX"
                                  PositionY="@node.PositionY"
                                  IsSelected="@(selectedNodeId == node.Id)"
                                  HasError="@node.HasError"
                                  Status="@node.Status"
                                  OnNodeClicked="OnNodeClicked"
                                  OnNodeDoubleClicked="OnNodeDoubleClicked"
                                  OnNodeDragStart="OnNodeDragStart"
                                  OnNodeDrag="OnNodeDrag"
                                  OnNodeDragEnd="OnNodeDragEnd"
                                  OnNodeContextMenu="OnNodeContextMenu" />
                }
                }

                <!-- Connection lines -->
                <ConnectionContainer>
                    @foreach (var connection in workflowConnections)
                    {
                        var sourceNode = workflowNodes.FirstOrDefault(n => n.Id == connection.SourceNodeId);
                        var targetNode = workflowNodes.FirstOrDefault(n => n.Id == connection.TargetNodeId);
                        
                        if (sourceNode != null && targetNode != null)
                        {
                            <ConnectionLine ConnectionId="@connection.Id"
                                            SourceX="@GetConnectionPointX(sourceNode, connection.SourcePort)"
                                            SourceY="@GetConnectionPointY(sourceNode, connection.SourcePort)"
                                            TargetX="@GetConnectionPointX(targetNode, connection.TargetPort)"
                                            TargetY="@GetConnectionPointY(targetNode, connection.TargetPort)"
                                            SourcePort="@connection.SourcePort"
                                            TargetPort="@connection.TargetPort"
                                            Style="@connection.Style"
                                            Status="@connection.Status"
                                            OnConnectionClicked="OnConnectionClicked"
                                            OnConnectionHovered="OnConnectionHovered"
                                            OnConnectionLeft="OnConnectionLeft" />
                        }
                    }
                </ConnectionContainer>
            </WorkflowCanvas>
        </div>
    </div>
    
    <!-- Node Type Selection Modal -->
    <NodeTypeSelectionModal IsVisible="showNodeTypeModal"
                           OnNodeTypeSelected="OnNodeTypeSelected"
                           OnCancel="OnCancelNodeTypeSelection" />
    
    <!-- Confirmation Dialog -->
    <ConfirmationDialog IsVisible="showConfirmationDialog"
                       Title="@confirmationTitle"
                       Message="@confirmationMessage"
                       Details="@confirmationDetails"
                       DialogType="@confirmationDialogType"
                       ConfirmText="@confirmationConfirmText"
                       OnConfirm="OnConfirmationConfirmed"
                       OnCancel="OnConfirmationCancelled" />
    
    <!-- Context Menu -->
    <ContextMenu IsVisible="showContextMenu"
                X="contextMenuX"
                Y="contextMenuY"
                MenuItems="contextMenuItems"
                OnItemSelected="OnContextMenuItemSelected"
                OnHide="OnContextMenuHide" />
    
    <!-- Node Configuration Panel -->
    <NodeConfigPanel IsVisible="showConfigPanel"
                    SelectedNodeId="selectedNodeId"
                    SelectedNode="GetSelectedNodeInfo()"
                    OnClose="OnCloseConfigPanel"
                    OnConfigurationChanged="OnNodeConfigurationChanged" />
}

@code {    [Parameter] public Guid WorkflowId { get; set; }
    
    private WorkflowDto? workflow;
    private string? selectedNodeId;
    private List<WorkflowNodeModel> workflowNodes = new();
    private List<WorkflowConnectionModel> workflowConnections = new();
    
    // JavaScript interop tracking
    private bool isJsInitialized = false;
    private bool isInteractiveMode = false;
    
    // Modal states
    private bool showNodeTypeModal = false;
    private bool showConfirmationDialog = false;
    private string confirmationTitle = "";
    private string confirmationMessage = "";
    private string? confirmationDetails = null;
    private ConfirmationDialog.ConfirmationDialogType confirmationDialogType = ConfirmationDialog.ConfirmationDialogType.Warning;
    private string confirmationConfirmText = "Confirm";
    private string? pendingDeleteNodeId = null;
    
    // Context menu states
    private bool showContextMenu = false;
    private double contextMenuX = 0;
    private double contextMenuY = 0;
    private string? contextMenuNodeId = null;
    private List<ContextMenu.ContextMenuItem> contextMenuItems = new();
    
    // Config panel states
    private bool showConfigPanel = false;
    
    // Node creation
    private double nextNodeX = 200;
    private double nextNodeY = 200;
    private int nodeCounter = 1;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadWorkflow();
        InitializeSampleNodes();
        InitializeSampleConnections();
    }
      protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if we're in interactive mode by testing if JSRuntime is available
            try
            {
                // Try a simple JS interop call to detect if we're in interactive mode
                await JSRuntime.InvokeVoidAsync("eval", "void(0)");
                isInteractiveMode = true;
                await InitializeJavaScript();
            }
            catch (InvalidOperationException)
            {
                // Static rendering mode - JavaScript interop not available
                isInteractiveMode = false;
                isJsInitialized = false;
            }
        }
    }
      private async Task LoadWorkflow()
    {
        try
        {
            workflow = await WorkflowService.GetWorkflowByIdAsync(WorkflowId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading workflow {WorkflowId}", WorkflowId);
        }
    }    private bool IsJavaScriptAvailable()
    {
        return isInteractiveMode && JSRuntime != null;
    }

    private async Task InitializeJavaScript()
    {
        if (!IsJavaScriptAvailable())
        {
            isJsInitialized = false;
            return;
        }

        try
        {
            await JSRuntime.InvokeVoidAsync("workflowDesigner.initialize", DotNetObjectReference.Create(this));
            isJsInitialized = true;
        }
        catch (InvalidOperationException)
        {
            // JavaScript interop not available during prerendering, skip initialization
            isJsInitialized = false;
        }
        catch (Exception ex)
        {
            // Other errors during initialization, mark as not initialized
            Logger?.LogWarning(ex, "Error initializing WorkflowDesigner JavaScript");
            isJsInitialized = false;
        }
    }

    private void InitializeSampleNodes()
    {
        workflowNodes = new List<WorkflowNodeModel>
        {
            new() 
            { 
                Id = "email-1", 
                Label = "Email Trigger", 
                Description = "Trigger on new email",
                NodeType = WorkflowNode.NodeTypeCategory.Email,
                PositionX = 100, 
                PositionY = 100 
            },
            new() 
            { 
                Id = "ai-1", 
                Label = "AI Processing", 
                Description = "Process text with AI",
                NodeType = WorkflowNode.NodeTypeCategory.AI,
                PositionX = 300, 
                PositionY = 250,
                Status = WorkflowNode.NodeStatus.Running
            },
            new() 
            { 
                Id = "router-1", 
                Label = "Decision Router", 
                Description = "Route based on condition",
                NodeType = WorkflowNode.NodeTypeCategory.Router,
                PositionX = 150, 
                PositionY = 400 
            },
            new() 
            { 
                Id = "integration-1", 
                Label = "API Integration", 
                Description = "Call external API",
                NodeType = WorkflowNode.NodeTypeCategory.Integration,
                PositionX = 350, 
                PositionY = 550,
                HasError = true
            },
            new() 
            { 
                Id = "utility-1", 
                Label = "Data Transform", 
                Description = "Transform data format",
                NodeType = WorkflowNode.NodeTypeCategory.Utility,
                PositionX = 500, 
                PositionY = 300,
                Status = WorkflowNode.NodeStatus.Completed
            },
            new() 
            { 
                Id = "sheet-1", 
                Label = "Google Sheets", 
                Description = "Add row to sheet",
                NodeType = WorkflowNode.NodeTypeCategory.Sheet,
                PositionX = 600, 
                PositionY = 150 
            },
            new() 
            { 
                Id = "gmail-1", 
                Label = "Gmail", 
                Description = "Send email via Gmail",
                NodeType = WorkflowNode.NodeTypeCategory.Gmail,
                PositionX = 750, 
                PositionY = 400,
                Status = WorkflowNode.NodeStatus.Warning
            }
        };
    }
    
    // Node Management Methods
    private Task OnAddNodeClicked()
    {
        showNodeTypeModal = true;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private async Task OnNodeTypeSelected(NodeTypeSelectionModal.NodeTypeSelectionResult result)
    {
        showNodeTypeModal = false;
        await CreateNewNode(result.NodeType, result.ModuleType);
        StateHasChanged();
    }
    
    private Task OnCancelNodeTypeSelection()
    {
        showNodeTypeModal = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task CreateNewNode(NodeType nodeType, ModuleType moduleType)
    {
        var nodeId = $"node-{nodeCounter++}";
        
        // Validate and adjust position to avoid overlaps
        var position = FindValidNodePosition(nextNodeX, nextNodeY);
        
        var newNode = new WorkflowNodeModel
        {
            Id = nodeId,
            Label = GetDefaultNodeLabel(nodeType, moduleType),
            Description = GetDefaultNodeDescription(nodeType, moduleType),
            NodeType = MapNodeTypeToWorkflowNodeType(nodeType),
            PositionX = position.X,
            PositionY = position.Y,
            HasError = false,
            Status = WorkflowNode.NodeStatus.None
        };
        
        workflowNodes.Add(newNode);
        selectedNodeId = nodeId;
        
        // Update position for next node
        nextNodeX += 200;
        if (nextNodeX > 800)
        {
            nextNodeX = 200;
            nextNodeY += 150;
        }
        
        Logger.LogInformation("Created new node: {NodeId} of type {NodeType} at ({X}, {Y})", nodeId, nodeType, position.X, position.Y);
        
        // Here you would typically save to the backend
        // await WorkflowService.AddNodeAsync(WorkflowId, newNode);
        
        return Task.CompletedTask;
    }
    
    private (double X, double Y) FindValidNodePosition(double preferredX, double preferredY)
    {
        const double nodeWidth = 160;
        const double nodeHeight = 80;
        const double minSpacing = 20;
        const double canvasMargin = 50;
        
        var testX = Math.Max(canvasMargin, preferredX);
        var testY = Math.Max(canvasMargin, preferredY);
        
        // Check for overlaps with existing nodes
        int attempts = 0;
        const int maxAttempts = 50;
        
        while (attempts < maxAttempts)
        {
            bool hasOverlap = false;
            
            foreach (var existingNode in workflowNodes)
            {
                var distanceX = Math.Abs(testX - existingNode.PositionX);
                var distanceY = Math.Abs(testY - existingNode.PositionY);
                
                if (distanceX < nodeWidth + minSpacing && distanceY < nodeHeight + minSpacing)
                {
                    hasOverlap = true;
                    break;
                }
            }
            
            if (!hasOverlap)
            {
                return (testX, testY);
            }
            
            // Try next position in a grid pattern
            testX += nodeWidth + minSpacing;
            if (testX > 1000)
            {
                testX = canvasMargin;
                testY += nodeHeight + minSpacing;
            }
            
            attempts++;
        }
        
        // If no valid position found after max attempts, use preferred position anyway
        Logger.LogWarning("Could not find non-overlapping position for new node, using preferred position");
        return (Math.Max(canvasMargin, preferredX), Math.Max(canvasMargin, preferredY));
    }
    
    private string GetDefaultNodeLabel(NodeType nodeType, ModuleType moduleType)
    {
        return nodeType switch
        {
            NodeType.Input => $"Input {moduleType}",
            NodeType.Process => $"Process {moduleType}",
            NodeType.Output => $"Output {moduleType}",
            NodeType.Decision => $"Decision {moduleType}",
            NodeType.Trigger => $"Trigger {moduleType}",
            _ => $"Node {moduleType}"
        };
    }
    
    private string GetDefaultNodeDescription(NodeType nodeType, ModuleType moduleType)
    {
        return $"{nodeType} node using {moduleType} module";
    }
    
    private WorkflowNode.NodeTypeCategory MapNodeTypeToWorkflowNodeType(NodeType nodeType)
    {
        return nodeType switch
        {
            NodeType.Input => WorkflowNode.NodeTypeCategory.Email, // Default mapping
            NodeType.Process => WorkflowNode.NodeTypeCategory.AI,
            NodeType.Output => WorkflowNode.NodeTypeCategory.Integration,
            NodeType.Decision => WorkflowNode.NodeTypeCategory.Router,
            NodeType.Trigger => WorkflowNode.NodeTypeCategory.Utility,
            _ => WorkflowNode.NodeTypeCategory.Utility
        };
    }
    
    [JSInvokable]
    public Task OnKeyDown(string key)
    {
        if (key == "Delete" && !string.IsNullOrEmpty(selectedNodeId))
        {
            return ShowDeleteNodeConfirmation(selectedNodeId);
        }
        
        return Task.CompletedTask;
    }
    
    private Task ShowDeleteNodeConfirmation(string nodeId)
    {
        var node = workflowNodes.FirstOrDefault(n => n.Id == nodeId);
        if (node != null)
        {
            pendingDeleteNodeId = nodeId;
            confirmationTitle = "Delete Node";
            confirmationMessage = $"Are you sure you want to delete the node '{node.Label}'?";
            confirmationDetails = "This action cannot be undone. All connections to this node will also be removed.";
            confirmationDialogType = ConfirmationDialog.ConfirmationDialogType.Danger;
            confirmationConfirmText = "Delete";
            showConfirmationDialog = true;
            StateHasChanged();
        }
        
        return Task.CompletedTask;
    }
    
    private async Task OnConfirmationConfirmed()
    {
        showConfirmationDialog = false;
        
        if (!string.IsNullOrEmpty(pendingDeleteNodeId))
        {
            await DeleteNode(pendingDeleteNodeId);
            pendingDeleteNodeId = null;
        }
        
        StateHasChanged();
    }
    
    private Task OnConfirmationCancelled()
    {
        showConfirmationDialog = false;
        pendingDeleteNodeId = null;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task DeleteNode(string nodeId)
    {
        var node = workflowNodes.FirstOrDefault(n => n.Id == nodeId);
        if (node != null)
        {
            workflowNodes.Remove(node);
            
            // Remove all connections involving this node
            workflowConnections.RemoveAll(c => c.SourceNodeId == nodeId || c.TargetNodeId == nodeId);
            
            // Clear selection if the deleted node was selected
            if (selectedNodeId == nodeId)
            {
                selectedNodeId = null;
            }
            
            Logger.LogInformation("Deleted node: {NodeId}", nodeId);
            
            // Here you would typically save to the backend
            // await WorkflowService.DeleteNodeAsync(WorkflowId, nodeId);
        }
        
        return Task.CompletedTask;
    }

    private Task OnNodeClicked(WorkflowNode.WorkflowNodeEventArgs args)
    {
        selectedNodeId = args.NodeId;
        StateHasChanged();
        Logger.LogInformation("Node clicked: {NodeId}", args.NodeId);
        return Task.CompletedTask;
    }
    
    private Task OnNodeDoubleClicked(WorkflowNode.WorkflowNodeEventArgs args)
    {
        selectedNodeId = args.NodeId;
        showConfigPanel = true;
        StateHasChanged();
        Logger.LogInformation("Node double-clicked: {NodeId} - Opening configuration panel", args.NodeId);
        return Task.CompletedTask;
    }

    private Task OnNodeDragStart(WorkflowNode.WorkflowNodeEventArgs args)
    {
        Logger.LogInformation("Node drag start: {NodeId} at ({X}, {Y})", args.NodeId, args.X, args.Y);
        return Task.CompletedTask;
    }

    private Task OnNodeDrag(WorkflowNode.WorkflowNodeEventArgs args)
    {
        var node = workflowNodes.FirstOrDefault(n => n.Id == args.NodeId);
        if (node != null)
        {
            node.PositionX = args.X;
            node.PositionY = args.Y;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task OnNodeDragEnd(WorkflowNode.WorkflowNodeEventArgs args)
    {
        Logger.LogInformation("Node drag end: {NodeId} at ({X}, {Y})", args.NodeId, args.X, args.Y);
        // Here you would typically save the new position to the backend
        return Task.CompletedTask;
    }
    
    private Task OnNodeContextMenu(WorkflowNode.WorkflowNodeContextMenuEventArgs args)
    {
        contextMenuNodeId = args.NodeId;
        contextMenuX = args.ClientX;
        contextMenuY = args.ClientY;
        
        // Build context menu items for the node
        var node = workflowNodes.FirstOrDefault(n => n.Id == args.NodeId);
        if (node != null)
        {
            selectedNodeId = args.NodeId; // Select the node when right-clicked
            
            contextMenuItems = new List<ContextMenu.ContextMenuItem>
            {
                ContextMenu.ContextMenuItem.Create("duplicate", "Duplicate Node", "bi bi-copy", "Ctrl+D"),
                ContextMenu.ContextMenuItem.Create("configure", "Configure", "bi bi-gear", ""),
                ContextMenu.ContextMenuItem.Separator(),
                ContextMenu.ContextMenuItem.Create("delete", "Delete Node", "bi bi-trash", "Delete")
            };
            
            showContextMenu = true;
            StateHasChanged();
        }
        
        return Task.CompletedTask;
    }
    
    private async Task OnContextMenuItemSelected(ContextMenu.ContextMenuItem item)
    {
        if (string.IsNullOrEmpty(contextMenuNodeId))
            return;
            
        switch (item.Id)
        {
            case "duplicate":
                await DuplicateNode(contextMenuNodeId);
                break;
            case "configure":
                await ConfigureNode(contextMenuNodeId);
                break;
            case "delete":
                await ShowDeleteNodeConfirmation(contextMenuNodeId);
                break;
        }
        
        showContextMenu = false;
        StateHasChanged();
    }
    
    private Task OnContextMenuHide()
    {
        showContextMenu = false;
        contextMenuNodeId = null;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task DuplicateNode(string nodeId)
    {
        var sourceNode = workflowNodes.FirstOrDefault(n => n.Id == nodeId);
        if (sourceNode != null)
        {
            var duplicatedNodeId = $"node-{nodeCounter++}";
            var duplicatedNode = new WorkflowNodeModel
            {
                Id = duplicatedNodeId,
                Label = $"{sourceNode.Label} (Copy)",
                Description = sourceNode.Description,
                NodeType = sourceNode.NodeType,
                PositionX = sourceNode.PositionX + 50,
                PositionY = sourceNode.PositionY + 50,
                HasError = false,
                Status = WorkflowNode.NodeStatus.None
            };
            
            workflowNodes.Add(duplicatedNode);
            selectedNodeId = duplicatedNodeId;
            
            Logger.LogInformation("Duplicated node: {OriginalNodeId} -> {NewNodeId}", nodeId, duplicatedNodeId);
        }
        
        return Task.CompletedTask;
    }
    
    private Task ConfigureNode(string nodeId)
    {
        var node = workflowNodes.FirstOrDefault(n => n.Id == nodeId);
        if (node != null)
        {
            Logger.LogInformation("Configure node: {NodeId}", nodeId);
            selectedNodeId = nodeId;
            showConfigPanel = true;
            StateHasChanged();
        }
        
        return Task.CompletedTask;
    }
    
    private NodeConfigPanel.WorkflowNodeInfo? GetSelectedNodeInfo()
    {
        if (string.IsNullOrEmpty(selectedNodeId))
            return null;
            
        var node = workflowNodes.FirstOrDefault(n => n.Id == selectedNodeId);
        if (node == null)
            return null;
            
        return new NodeConfigPanel.WorkflowNodeInfo
        {
            Id = node.Id,
            Label = node.Label,
            Description = node.Description,
            NodeType = ConvertToNodeType(node.NodeType),
            ModuleType = ModuleType.Custom, // Default for now
            Configuration = node.Configuration
        };
    }
    
    private NodeType ConvertToNodeType(WorkflowNode.NodeTypeCategory category)
    {
        return category switch
        {
            WorkflowNode.NodeTypeCategory.Email => NodeType.Input,
            WorkflowNode.NodeTypeCategory.Utility => NodeType.Process,
            WorkflowNode.NodeTypeCategory.Integration => NodeType.Output,
            WorkflowNode.NodeTypeCategory.Router => NodeType.Decision,
            WorkflowNode.NodeTypeCategory.AI => NodeType.Process,
            WorkflowNode.NodeTypeCategory.Sheet => NodeType.Output,
            WorkflowNode.NodeTypeCategory.Gmail => NodeType.Input,
            _ => NodeType.Process
        };
    }
    
    private Task OnCloseConfigPanel()
    {
        showConfigPanel = false;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task OnNodeConfigurationChanged(NodeConfigPanel.NodeConfigurationModel config)
    {
        var node = workflowNodes.FirstOrDefault(n => n.Id == config.NodeId);
        if (node != null)
        {
            node.Label = config.Name;
            node.Description = config.Description;
            
            // Save configuration as JSON
            var configJson = System.Text.Json.JsonSerializer.Serialize(config);
            node.Configuration = configJson;
            
            Logger.LogInformation("Updated configuration for node: {NodeId}", config.NodeId);
            StateHasChanged();
        }
        
        return Task.CompletedTask;
    }

    private class WorkflowNodeModel
    {
        public string Id { get; set; } = "";
        public string Label { get; set; } = "";
        public string Description { get; set; } = "";
        public WorkflowNode.NodeTypeCategory NodeType { get; set; } = WorkflowNode.NodeTypeCategory.Utility;
        public double PositionX { get; set; } = 0;
        public double PositionY { get; set; } = 0;
        public bool HasError { get; set; } = false;
        public WorkflowNode.NodeStatus Status { get; set; } = WorkflowNode.NodeStatus.None;
        public string? Configuration { get; set; }
    }

    private void InitializeSampleConnections()
    {
        workflowConnections = new List<WorkflowConnectionModel>
        {
            new()
            {
                Id = "conn-1",
                SourceNodeId = "email-1",
                TargetNodeId = "ai-1",
                SourcePort = "output",
                TargetPort = "input",
                Style = ConnectionLine.ConnectionStyle.Solid,
                Status = ConnectionLine.ConnectionStatus.Active
            },
            new()
            {
                Id = "conn-2", 
                SourceNodeId = "ai-1",
                TargetNodeId = "router-1",
                SourcePort = "output",
                TargetPort = "input",
                Style = ConnectionLine.ConnectionStyle.Dashed,
                Status = ConnectionLine.ConnectionStatus.Success
            },
            new()
            {
                Id = "conn-3",
                SourceNodeId = "router-1", 
                TargetNodeId = "integration-1",
                SourcePort = "output",
                TargetPort = "input",
                Style = ConnectionLine.ConnectionStyle.Solid,
                Status = ConnectionLine.ConnectionStatus.Error
            },
            new()
            {
                Id = "conn-4",
                SourceNodeId = "ai-1",
                TargetNodeId = "utility-1", 
                SourcePort = "output",
                TargetPort = "input",
                Style = ConnectionLine.ConnectionStyle.Dotted,
                Status = ConnectionLine.ConnectionStatus.Warning
            }
        };
    }

    private double GetConnectionPointX(WorkflowNodeModel node, string port)
    {
        // For circular nodes (80px diameter)
        const double nodeCenterX = 40; // 80px diameter / 2
        return port switch
        {
            "input" => node.PositionX, // Left side of circle
            "output" => node.PositionX + 80, // Right side of circle  
            _ => node.PositionX + nodeCenterX // Center
        };
    }

    private double GetConnectionPointY(WorkflowNodeModel node, string port)
    {
        // For circular nodes (80px diameter)
        const double nodeCenterY = 40; // 80px diameter / 2
        return node.PositionY + nodeCenterY; // Center vertically
    }

    private Task OnConnectionClicked(ConnectionLine.ConnectionEventArgs args)
    {
        Logger.LogInformation("Connection clicked: {ConnectionId}", args.ConnectionId);
        return Task.CompletedTask;
    }

    private Task OnConnectionHovered(ConnectionLine.ConnectionEventArgs args)
    {
        Logger.LogInformation("Connection hovered: {ConnectionId}", args.ConnectionId);
        return Task.CompletedTask;
    }

    private Task OnConnectionLeft(ConnectionLine.ConnectionEventArgs args)
    {
        Logger.LogInformation("Connection left: {ConnectionId}", args.ConnectionId);
        return Task.CompletedTask;
    }

    private class WorkflowConnectionModel
    {
        public string Id { get; set; } = "";
        public string SourceNodeId { get; set; } = "";
        public string TargetNodeId { get; set; } = "";
        public string SourcePort { get; set; } = "output";
        public string TargetPort { get; set; } = "input";
        public ConnectionLine.ConnectionStyle Style { get; set; } = ConnectionLine.ConnectionStyle.Solid;
        public ConnectionLine.ConnectionStatus Status { get; set; } = ConnectionLine.ConnectionStatus.Normal;
    }    public async ValueTask DisposeAsync()
    {
        // Only attempt JavaScript disposal if we successfully initialized JS interop
        // and we're in interactive mode
        if (isJsInitialized && IsJavaScriptAvailable())
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("workflowDesigner.dispose");
            }
            catch (JSDisconnectedException)
            {
                // Component is being disposed, ignore JS disconnection
            }
            catch (TaskCanceledException)
            {
                // Circuit is being torn down, ignore cancellation
            }
            catch (ObjectDisposedException)
            {
                // JSRuntime is already disposed
            }
            catch (InvalidOperationException)
            {
                // Circuit may be in invalid state during disposal
            }
            catch (Exception ex)
            {
                // Log any other unexpected exceptions during disposal but don't rethrow
                Logger?.LogWarning(ex, "Error during WorkflowDesigner disposal, continuing with cleanup");
            }
        }
        // If JS was never initialized (e.g., during static rendering), no cleanup needed
    }
}