@page "/workflow-designer/{workflowId:guid}"
@using umuthi.Web.Components
@using umuthi.Application.DTOs
@using umuthi.Application.Interfaces
@inject IWorkflowService WorkflowService
@inject ILogger<WorkflowDesigner> Logger
@rendermode InteractiveServer

<PageTitle>Workflow Designer - @(workflow?.Name ?? "Loading...")</PageTitle>

@if (workflow == null)
{
    <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading workflow...</p>
        </div>
    </div>
}
else
{
    <div style="height: 100vh; display: flex; flex-direction: column;">
        <!-- Header -->
        <div style="padding: 1rem; background: white; border-bottom: 1px solid #dee2e6; box-shadow: 0 1px 3px rgba(0,0,0,0.1);">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2 class="mb-1">@workflow.Name</h2>
                    <p class="text-muted mb-0">@workflow.Description</p>
                </div>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-secondary">
                        <i class="bi bi-save"></i> Save
                    </button>
                    <button class="btn btn-outline-secondary">
                        <i class="bi bi-play"></i> Test Run
                    </button>
                    <a href="/workflows" class="btn btn-outline-secondary">
                        <i class="bi bi-arrow-left"></i> Back to Workflows
                    </a>
                </div>
            </div>
        </div>
        
        <!-- Canvas -->
        <div style="flex: 1;">
            <WorkflowCanvas>
                <!-- Sample workflow nodes using the new WorkflowNode component -->
                @foreach (var node in workflowNodes)
                {
                    <WorkflowNode Id="@node.Id"
                                  Label="@node.Label"
                                  Description="@node.Description"
                                  NodeType="@node.NodeType"
                                  PositionX="@node.PositionX"
                                  PositionY="@node.PositionY"
                                  IsSelected="@(selectedNodeId == node.Id)"
                                  HasError="@node.HasError"
                                  Status="@node.Status"
                                  OnNodeClicked="OnNodeClicked"
                                  OnNodeDragStart="OnNodeDragStart"
                                  OnNodeDrag="OnNodeDrag"
                                  OnNodeDragEnd="OnNodeDragEnd" />
                }

                <!-- Connection lines -->
                <ConnectionContainer>
                    @foreach (var connection in workflowConnections)
                    {
                        var sourceNode = workflowNodes.FirstOrDefault(n => n.Id == connection.SourceNodeId);
                        var targetNode = workflowNodes.FirstOrDefault(n => n.Id == connection.TargetNodeId);
                        
                        if (sourceNode != null && targetNode != null)
                        {
                            <ConnectionLine ConnectionId="@connection.Id"
                                            SourceX="@GetConnectionPointX(sourceNode, connection.SourcePort)"
                                            SourceY="@GetConnectionPointY(sourceNode, connection.SourcePort)"
                                            TargetX="@GetConnectionPointX(targetNode, connection.TargetPort)"
                                            TargetY="@GetConnectionPointY(targetNode, connection.TargetPort)"
                                            SourcePort="@connection.SourcePort"
                                            TargetPort="@connection.TargetPort"
                                            Style="@connection.Style"
                                            Status="@connection.Status"
                                            OnConnectionClicked="OnConnectionClicked"
                                            OnConnectionHovered="OnConnectionHovered"
                                            OnConnectionLeft="OnConnectionLeft" />
                        }
                    }
                </ConnectionContainer>
            </WorkflowCanvas>
        </div>
    </div>
}

@code {
    [Parameter] public Guid WorkflowId { get; set; }
    
    private WorkflowDto? workflow;
    private string? selectedNodeId;
    private List<WorkflowNodeModel> workflowNodes = new();
    private List<WorkflowConnectionModel> workflowConnections = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadWorkflow();
        InitializeSampleNodes();
        InitializeSampleConnections();
    }
    
    private async Task LoadWorkflow()
    {
        try
        {
            workflow = await WorkflowService.GetWorkflowByIdAsync(WorkflowId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading workflow {WorkflowId}", WorkflowId);
        }
    }

    private void InitializeSampleNodes()
    {
        workflowNodes = new List<WorkflowNodeModel>
        {
            new() 
            { 
                Id = "email-1", 
                Label = "Email Trigger", 
                Description = "Trigger on new email",
                NodeType = WorkflowNode.NodeTypeCategory.Email,
                PositionX = 100, 
                PositionY = 100 
            },
            new() 
            { 
                Id = "ai-1", 
                Label = "AI Processing", 
                Description = "Process text with AI",
                NodeType = WorkflowNode.NodeTypeCategory.AI,
                PositionX = 300, 
                PositionY = 250,
                Status = WorkflowNode.NodeStatus.Running
            },
            new() 
            { 
                Id = "router-1", 
                Label = "Decision Router", 
                Description = "Route based on condition",
                NodeType = WorkflowNode.NodeTypeCategory.Router,
                PositionX = 150, 
                PositionY = 400 
            },
            new() 
            { 
                Id = "integration-1", 
                Label = "API Integration", 
                Description = "Call external API",
                NodeType = WorkflowNode.NodeTypeCategory.Integration,
                PositionX = 350, 
                PositionY = 550,
                HasError = true
            },
            new() 
            { 
                Id = "utility-1", 
                Label = "Data Transform", 
                Description = "Transform data format",
                NodeType = WorkflowNode.NodeTypeCategory.Utility,
                PositionX = 500, 
                PositionY = 300,
                Status = WorkflowNode.NodeStatus.Completed
            }
        };
    }

    private Task OnNodeClicked(WorkflowNode.WorkflowNodeEventArgs args)
    {
        selectedNodeId = args.NodeId;
        StateHasChanged();
        Logger.LogInformation("Node clicked: {NodeId}", args.NodeId);
        return Task.CompletedTask;
    }

    private Task OnNodeDragStart(WorkflowNode.WorkflowNodeEventArgs args)
    {
        Logger.LogInformation("Node drag start: {NodeId} at ({X}, {Y})", args.NodeId, args.X, args.Y);
        return Task.CompletedTask;
    }

    private Task OnNodeDrag(WorkflowNode.WorkflowNodeEventArgs args)
    {
        var node = workflowNodes.FirstOrDefault(n => n.Id == args.NodeId);
        if (node != null)
        {
            node.PositionX = args.X;
            node.PositionY = args.Y;
            StateHasChanged();
        }
        return Task.CompletedTask;
    }

    private Task OnNodeDragEnd(WorkflowNode.WorkflowNodeEventArgs args)
    {
        Logger.LogInformation("Node drag end: {NodeId} at ({X}, {Y})", args.NodeId, args.X, args.Y);
        // Here you would typically save the new position to the backend
        return Task.CompletedTask;
    }

    private class WorkflowNodeModel
    {
        public string Id { get; set; } = "";
        public string Label { get; set; } = "";
        public string Description { get; set; } = "";
        public WorkflowNode.NodeTypeCategory NodeType { get; set; } = WorkflowNode.NodeTypeCategory.Utility;
        public double PositionX { get; set; } = 0;
        public double PositionY { get; set; } = 0;
        public bool HasError { get; set; } = false;
        public WorkflowNode.NodeStatus Status { get; set; } = WorkflowNode.NodeStatus.None;
    }

    private void InitializeSampleConnections()
    {
        workflowConnections = new List<WorkflowConnectionModel>
        {
            new()
            {
                Id = "conn-1",
                SourceNodeId = "email-1",
                TargetNodeId = "ai-1",
                SourcePort = "output",
                TargetPort = "input",
                Style = ConnectionLine.ConnectionStyle.Solid,
                Status = ConnectionLine.ConnectionStatus.Active
            },
            new()
            {
                Id = "conn-2", 
                SourceNodeId = "ai-1",
                TargetNodeId = "router-1",
                SourcePort = "output",
                TargetPort = "input",
                Style = ConnectionLine.ConnectionStyle.Dashed,
                Status = ConnectionLine.ConnectionStatus.Success
            },
            new()
            {
                Id = "conn-3",
                SourceNodeId = "router-1", 
                TargetNodeId = "integration-1",
                SourcePort = "output",
                TargetPort = "input",
                Style = ConnectionLine.ConnectionStyle.Solid,
                Status = ConnectionLine.ConnectionStatus.Error
            },
            new()
            {
                Id = "conn-4",
                SourceNodeId = "ai-1",
                TargetNodeId = "utility-1", 
                SourcePort = "output",
                TargetPort = "input",
                Style = ConnectionLine.ConnectionStyle.Dotted,
                Status = ConnectionLine.ConnectionStatus.Warning
            }
        };
    }

    private double GetConnectionPointX(WorkflowNodeModel node, string port)
    {
        // Assuming node width of ~160px based on CSS min-width
        const double nodeWidth = 160;
        return port switch
        {
            "input" => node.PositionX, // Left side
            "output" => node.PositionX + nodeWidth, // Right side
            _ => node.PositionX + nodeWidth / 2 // Center
        };
    }

    private double GetConnectionPointY(WorkflowNodeModel node, string port)
    {
        // Assuming node height of ~80px based on typical node structure
        const double nodeHeight = 80;
        return node.PositionY + nodeHeight / 2; // Center vertically
    }

    private Task OnConnectionClicked(ConnectionLine.ConnectionEventArgs args)
    {
        Logger.LogInformation("Connection clicked: {ConnectionId}", args.ConnectionId);
        return Task.CompletedTask;
    }

    private Task OnConnectionHovered(ConnectionLine.ConnectionEventArgs args)
    {
        Logger.LogInformation("Connection hovered: {ConnectionId}", args.ConnectionId);
        return Task.CompletedTask;
    }

    private Task OnConnectionLeft(ConnectionLine.ConnectionEventArgs args)
    {
        Logger.LogInformation("Connection left: {ConnectionId}", args.ConnectionId);
        return Task.CompletedTask;
    }

    private class WorkflowConnectionModel
    {
        public string Id { get; set; } = "";
        public string SourceNodeId { get; set; } = "";
        public string TargetNodeId { get; set; } = "";
        public string SourcePort { get; set; } = "output";
        public string TargetPort { get; set; } = "input";
        public ConnectionLine.ConnectionStyle Style { get; set; } = ConnectionLine.ConnectionStyle.Solid;
        public ConnectionLine.ConnectionStatus Status { get; set; } = ConnectionLine.ConnectionStatus.Normal;
    }
}