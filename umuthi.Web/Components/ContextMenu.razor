@using Microsoft.AspNetCore.Components.Web

<!-- Context Menu -->
<div class="context-menu @(IsVisible ? "show" : "")" 
     style="position: fixed; top: @(Y)px; left: @(X)px; display: @(IsVisible ? "block" : "none"); z-index: 10000;">
    <div class="context-menu-content">
        @foreach (var item in MenuItems)
        {
            @if (item.IsSeparator)
            {
                <div class="context-menu-separator"></div>
            }
            else
            {
                <button class="context-menu-item @(item.IsDisabled ? "disabled" : "")" 
                        @onclick="() => OnItemClicked(item)"
                        disabled="@item.IsDisabled">
                    @if (!string.IsNullOrEmpty(item.Icon))
                    {
                        <i class="@item.Icon"></i>
                    }
                    <span>@item.Text</span>
                    @if (!string.IsNullOrEmpty(item.Shortcut))
                    {
                        <small class="shortcut">@item.Shortcut</small>
                    }
                </button>
            }
        }
    </div>
</div>

<!-- Backdrop to close menu when clicking outside -->
@if (IsVisible)
{
    <div class="context-menu-backdrop" @onclick="Hide"></div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public double X { get; set; }
    [Parameter] public double Y { get; set; }
    [Parameter] public List<ContextMenuItem> MenuItems { get; set; } = new();
    [Parameter] public EventCallback<ContextMenuItem> OnItemSelected { get; set; }
    [Parameter] public EventCallback OnHide { get; set; }
    
    private async Task OnItemClicked(ContextMenuItem item)
    {
        if (!item.IsDisabled)
        {
            await OnItemSelected.InvokeAsync(item);
            await Hide();
        }
    }
    
    public async Task Hide()
    {
        await OnHide.InvokeAsync();
    }
    
    public class ContextMenuItem
    {
        public string Id { get; set; } = "";
        public string Text { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Shortcut { get; set; } = "";
        public bool IsDisabled { get; set; } = false;
        public bool IsSeparator { get; set; } = false;
        public object? Data { get; set; }
        
        public static ContextMenuItem Separator() => new() { IsSeparator = true };
        
        public static ContextMenuItem Create(string id, string text, string icon = "", string shortcut = "", bool isDisabled = false)
        {
            return new ContextMenuItem
            {
                Id = id,
                Text = text,
                Icon = icon,
                Shortcut = shortcut,
                IsDisabled = isDisabled
            };
        }
    }
}